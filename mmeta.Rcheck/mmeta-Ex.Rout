
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mmeta"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "mmeta-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('mmeta')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MultipleTables.create")
> ### * MultipleTables.create
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MultipleTables.create
> ### Title: Create an object of class 'MultipleTables'.
> ### Aliases: MultipleTables.create
> 
> ### ** Examples
> 
> ## No test: 
>  library(mmeta)
>  library(ggplot2)
>  ## Analyze the dataset colorectal to conduct exact inference of the odds ratios
>  data(colorectal)
>  colorectal['study_name'] <- colorectal['studynames']
>  multiple_tables_obj <- MultipleTables.create(data=colorectal, measure='OR', model= 'Sarmanov')
>  
> ## End(No test)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MultipleTables.create", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:ggplot2'

> nameEx("MultipleTables.modelFit")
> ### * MultipleTables.modelFit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MultipleTables.modelFit
> ### Title: Exact posterior inference based on multiple 2x2 tables.
> ### Aliases: MultipleTables.modelFit
> 
> ### ** Examples
> 
> ## No test: 
>  library(mmeta)
>  library(ggplot2)
>  ## Analyze the dataset colorectal to conduct exact inference of the odds ratios
>  data(colorectal)
>  colorectal['study_name'] <- colorectal['studynames']
>  # ########################## If exact method is used ############################
>  ## Create object multiple_tables_obj_exact
>  multiple_tables_obj_exact <- MultipleTables.create(data=colorectal,
+  measure='OR', model= 'Sarmanov')
>  ## Model fit default
>  multiple_tables_obj_exact <- MultipleTables.modelFit(
+  multiple_tables_obj_exact, method = 'exact')
>  ## Options for Control; If set number of posterior samples is 5000
>  multiple_tables_obj_exact <- MultipleTables.modelFit(multiple_tables_obj_exact, method = 'exact',
+  control = list(n_samples = 3000))
>  ## If set intial values correspoinding to c(a1, b1, a2, b2, rho) as c(1,1,1,1,0):
>  multiple_tables_obj_exact <- MultipleTables.modelFit(multiple_tables_obj_exact, method = 'exact',
+  control = list(initial_values = c(1,1,1,1,0)))
>  ## If maximum number of iterations for iteration is 100
>  multiple_tables_obj_exact <- MultipleTables.modelFit(multiple_tables_obj_exact, method = 'exact',
+  control = list(maxit = 100))
>  ## If maximum number of iterations for iteration is 100 and number of posterior samples as 3000
>  multiple_tables_obj_exact <- MultipleTables.modelFit(multiple_tables_obj_exact, method = 'exact',
+  control = list(maxit = 100, nsamples = 3000))
>  # ########################## If sampling method is used ############################
>  multiple_tables_obj_sampling <- MultipleTables.create(data=colorectal,
+  measure='OR', model= 'Sarmanov')
>  multiple_tables_obj_sampling <- MultipleTables.modelFit(
+  multiple_tables_obj_sampling, method = 'sampling')
>  ## The options of \code{control} list specifying the fitting process are similar
>  ## to the codes shown above.
> ## End(No test)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MultipleTables.modelFit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:ggplot2'

> nameEx("MultipleTables.plot")
> ### * MultipleTables.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MultipleTables.plot
> ### Title: Plot Method for 'Multipletables' objects
> ### Aliases: MultipleTables.plot
> 
> ### ** Examples
> 
> ## No test: 
>  library(mmeta)
>  library(ggplot2)
>  ## Analyze the dataset colorectal to conduct exact inference of the odds ratios
>  data(colorectal)
>  colorectal['study_name'] <- colorectal['studynames']
>  ## If exact method is used, the codes for sampling method are similar.
>  ## Create object multiple_tables_obj_exact
>  multiple_tables_obj_exact <- MultipleTables.create(data=colorectal,
+   measure='OR', model= 'Sarmanov')
>  ## Model fit default
>  multiple_tables_obj_exact <- MultipleTables.modelFit(multiple_tables_obj_exact, method = 'exact')
>  ## Density plot, overlay
>  ## Note: There are no enough types of line, if we have too many densities!
>  MultipleTables.plot(multiple_tables_obj_exact, plot_type = 'density',
+  layout_type = 'overlay')
>  ## Choose Set by = ‘color’
>  MultipleTables.plot(multiple_tables_obj_exact, plot_type = 'density',
+  layout_type = 'overlay',by = 'color')
>  ## Set by = ‘color’ and specify xlim as 0 to 5.
>  MultipleTables.plot(multiple_tables_obj_exact, plot_type = 'density',
+  layout_type = 'overlay', by = 'color', xlim = c(0,5))
Warning: Removed 37334 rows containing missing values (`geom_line()`).
>  ## Set by = ‘color’ and specify xlim as 0 to 5 and add vertical line at OR = 1
>  MultipleTables.plot(multiple_tables_obj_exact, plot_type = 'density',
+  layout_type = 'overlay', by = 'color',xlim = c(0,5), add_vertical = 1)
Warning: Removed 37334 rows containing missing values (`geom_line()`).
>  ## If select three studies
>  MultipleTables.plot(multiple_tables_obj_exact, plot_type = 'density',
+  layout_type = 'overlay',selected_study_names = c('Bell','Chen','Oda'), xlim = c(0,5))
Warning: Removed 5682 rows containing missing values (`geom_line()`).
>  ## We can add external layouts for the return ggplot2 : * xlab as Odds ratio
>  ggplot2_obj <- MultipleTables.plot(multiple_tables_obj_exact,
+  plot_type = 'density', layout_type = 'overlay', by = 'color',xlim = c(0,5))
>  ggplot2_obj + xlab('Odds Ratio')  + ggtitle('OR ration for XX cancer')
Warning: Removed 37334 rows containing missing values (`geom_line()`).
>  ## density plot, plot side by side
>  MultipleTables.plot(multiple_tables_obj_exact, plot_type = 'density',
+  layout_type = 'side_by_side')
>  ## Forest plot (default)
>  MultipleTables.plot(multiple_tables_obj_exact, plot_type = 'forest')
Error in 1:num_studies : argument of length 0
Calls: MultipleTables.plot -> MultipleTables._plotForest
Execution halted
